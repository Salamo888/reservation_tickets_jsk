generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  firstName     String
  lastName      String
  password      String
  role          String         @default("USER")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  tickets       Ticket[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Match {
  id         String   @id
  homeTeamId String
  awayTeamId String
  place      String
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     String   @default("Ã€ venir")
  time       String?
  awayTeam   Team     @relation("AwayMatches", fields: [awayTeamId], references: [id])
  homeTeam   Team     @relation("HomeMatches", fields: [homeTeamId], references: [id])
  tickets    Ticket[]

  @@index([awayTeamId])
  @@index([date])
  @@index([homeTeamId])
}

model Team {
  id            String         @id
  name          String         @unique
  classment     Int            @default(3)
  logoUrl       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  awayMatches   Match[]        @relation("AwayMatches")
  homeMatches   Match[]        @relation("HomeMatches")
  subscriptions Subscription[]
}

model Ticket {
  id        String       @id @default(uuid())
  matchId   String
  userId    String
  quantity  Int          @default(1)
  price     Decimal
  status    TicketStatus @default(RESERVED)
  seatInfo  String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  match     Match        @relation(fields: [matchId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@index([matchId])
  @@index([userId])
}

model Subscription {
  id        String             @id @default(uuid())
  userId    String
  teamId    String
  startDate DateTime
  endDate   DateTime
  price     Decimal
  status    SubscriptionStatus @default(ACTIVE)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  team      Team               @relation(fields: [teamId], references: [id])
  user      User               @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([teamId])
}

enum TicketStatus {
  RESERVED
  PAID
  CANCELLED
  USED
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}
